 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Thread in java>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
       MultiTasking: Executing serveral tasks simultaneously is concepts of Multitasking.
                          Two Types:
                            1. Process Based MultiTasking
                            2. Thread Based Multitasking
       Its main purpose to improve the performance of the system by readucing the response time.

       MultiThreading: MultiThreading is a java Features, that allows concurrent execution of two or more parts of a program for maximum utilization of cpu.

       Thread:
       MultiTasking done at program level is called as thread.
       -> Threads are light weight.
       -> Threads share same address space.
       -> Separate part of execution in program.
       ->Interthread communication is less expensive.
       -> Context switching between thread is low cost.

       Process
       -> A Process is a program is execution.
       ->Process are heavy weight.
       ->Process required Separate address space.
       ->Interthread communication is expensive.
       -> Context switching between thread is costly.

       ADVANTAGE OF THREAD:
       1. Thread can be utilized to free up the main thread.
       2. Thread can be used to breakup a task into smaller unit that can be executed concurrently.

       DISVANTAGE OF THREAD:
       1. When more threads, the code becomes difficult to debug and maintain.
       2. Thread creation put a load on the system memory and cpu.

       TWO types of created by using:
       1. extending the Thread Class.
       2. implementing the Runnable Interface.

       1. extending the Thread Class.
       -> Here we inherited run method from thread we override user defined class.
       -> To start run Thread we use start method of thread class.

       exp: 1
       public class A extends Thread{
           @Override
           public void run() {
               for(int i=0;i<899;i++){
                   System.out.println("Task1");
               }
           }

           public static void main(String[] args) {
               A a1=new A();
               a1.start();
               for (int i=0;i<788;i++){
                   System.out.println("Task2");
               }
           }
       }


       2. public class MultiThreadingDemo extends Thread{
           @Override
           public void run() {
               try{
                   System.out.println("Thread"+Thread.currentThread().getId()+"is running");
               }catch (Exception e){
                   System.out.println("Exception occurred");
               }
           }

           public static void main(String[] args) {
               for (int i=0;i<8;i++){
                   MultiThreadingDemo ob=new MultiThreadingDemo() ;
                   ob.start();
               }
           }
       }

       public class Test extends Thread{
           @Override
           public void run() {
               System.out.println("Test");
           }

           public static void main(String[] args) {
               Test test=new Test();
               test.run();
               test.start();
           }
       }Test
       Test

       public class ThreadExp extends Thread{
           @Override
           public void run() {
               System.out.println("Hello!!!!...");
           }

           public static void main(String[] args) {
               ThreadExp threadExp=new ThreadExp();
               threadExp.start();
               threadExp.stop();
               threadExp.start();
           }//Exception in thread "main" java.lang.IllegalThreadStateException
          // at java.base/java.lang.Thread.start
           //Thread cannot be started twice
       }

       Interface Runnable
       -> Which Thread will executed how much time can not predicated by programmer as it is decided by the processor depinding or it availabilty.

       CREATING A THREAD USING Runnable Interface
       1. create a class that implements Runnable.
       2. Provide a run method in the runnable class.
       3. Create an instance of the Thread class and pass your Runnable Object to its constructor as a parameter.
       4. call the Thread object start method.

       package com.customerService.thread;

       public class Thred implements Runnable{
           @Override
           public void run() {
               for(int i=0;i<100;i++){
                   System.out.println("Task1");
               }
           }

           public static void main(String[] args) {
               Thred thred=new Thred();
               Thread thread=new Thread(thred);
               thread.start();
               for (int i=0;i<1000;i++){
                   System.out.println("Task2");
               }
           }
       }

       THREAD CREATING BY IMPLEMENTING THE Runnable Interface
       we create a new class which implements java.lang.Runnable interface and override run() method.
       Then we instantiate a Thread object and call start() method on this object.

       Thread class and Runnable Interface
       1. If we extend the Thread class our class can not extend any other class because java does not support multiple inheritance.
       But if we implement the rRunnable interface our class can still extend other base class.
       2. We can achieve basic functionality a thread by extending Thread class because it provides same in build method like yield(),interrupt() etc.
       that are not available in runnable interface.
       3. Using runnable we goes you an object that can be shared amoung multiple thread.

       Q. Which one is the best approach and why?
       ->Best way to define a thread is by implementing Runnable interface approach recommended.
       ->If we use Thread class approach our class will always extend thread class hence we miss inheritance advantage of any oher class.
       ->But in implementing runnable approach we can inherit oher class as well and we do not miss the inheritance benefits.


       t.start() vs t.run()
       ->t.start() will create a new Thread which is responsible for the execution of run() method but in the case of t.run() a new thread
       won't be create and run() method will be executed just like a normal method call.


       Q. Overloading of run() method is possible or not?
       Overload run() method is always possible but the Thread class start() method will always invoke the no argument run() method and for the over loaded run() method we have to call it explicitly.

       Q. If we don't override the run method and call the start() method then what will be the output we will get?
       Ex:
       class Threads1 extends Thread {
           main(){
               Threads1 t1=new Threads1();
               t.start();

           }
       }
       ->If we are override run() method and call the start() method then Thread can run() method will be executed hence we cannot get any output.
       public class B extends Thread{
           public void start(){
               System.out.println("Task2");
           }
              public void run() {
                  System.out.println("Task1");
              }

              public static void main(String[] args) {
                  B b=new B();
                  b.start();
              }
          }
          //output Task2
       if we override the start() method then our start() method will be executed like a normal method call and new thread won't be created.

       q. After starting a thread if we are trying to restart the thread then what will happen.
       to get runtime exception saying illagal thread state exception.
       Q. How we can get name of a thread?
       By using Thread.current Thread().getName() method we can get the name of a thread.

       Q. How we can set name of a thread?
       By using Thread.currentThread().setName() method we can set name of a thread.


       Thread Life Cycle
       https://www.geeksforgeeks.org/lifecycle-and-states-of-a-thread-in-java/

                start()       <-------                                       <-------            <-------      -
       New State-------->Active state(Runnable()(sleep(),wait(),notify(),notifyAll()))----->Running----->Terminal----->Deadlock()

       1. New State
       2. Active State(running, runnable)
       3. waiting/block state
       4. Timed wating state
       5.Terminated state

       1. New State
       ->By default, a Thread will be in a new state
       -> In this state, code has not yet been run and the execution process is not yet initiated.

       2. Active State
       ->When a thread invokes the start() method, it moves from the new state to the active state.
       Two state 1. Running 2. Runnable
       1. Runnable: A thread, that is ready to run is then moved to the runnable state, it is the duty of the thread scheduler to provide the
       thread time to run, moving the thread the running state.

       Thread Scheduler: is the java is the component of jvm that determines the execution order of multiple threads on a single process(cpu)
       It decides the order in which threads should run. This process is called Thread scheduler in java.

       Running:
       ->When the thread gets the cpu,it moves from the runnable to the running state.
       Generally,the most common change in the state of the thread is form runnable to running and again back to runnable.

       3. Blocked or waiting:
       ->When ever a thread is inactive for a span of time (not permanently) then, either the thread is in the blocked state or is in the waiting state.

       4. Terminated
       ->A thread reaches the termination state because of the following reasons:
       when a thread has finished its job, then it exists or terminates normally.

       5. Abnormal termination:
       ->It occurs when some unusual events such as an unhandled exception or segmentation faults.
       public class Threads extends Thread{
           @Override
           public void run() {
               System.out.println("Running");

           }

           public static void main(String[] args) {
               Threads threads=new Threads();
               System.out.println(threads.getState());
               threads.start();
               System.out.println(threads.getState());
               try{
                   Thread.sleep(5000);
               } catch (InterruptedException e) {
                   System.out.println(e);

                   throw new RuntimeException(e);
               }
               System.out.println(threads.getState());
           }
       }
       NEW
       RUNNABLE
       Running
       TERMINATED


       package com.customerService.thread;

       public class Sleep {
           public static void main(String[] args) throws InterruptedException {
               try{
                   Thread.sleep(5000);
               }
               catch (Exception e){
                   System.out.println(e);
               }
               System.out.println("Testing");
           }
       }
       //Testing

       Q. In how many ways we can prevent a thread execution?
       By using (yield,join and sleep) method we can stop a thread from execution.

       Q. What is the purpose of yield method?
       ->yield method causes to pass current execution thread to give the chance for waiting thread of some priority if there is no waiting
       thread or all waiting threads have low priority then same thread can contineous its execution.
       ->If multiple threads are waiting with the same priority then which waiting thread will get the chance we can not expect it depends on thread scheduler.
       ->The thread which is yielded when it will get chance once again it depends on thread scheduler and can not expect exactly.


       Q. What is the purpose of join() method?
       -> join() will until the timeout expires or thread finishes.
       ->exmp: if a thread t1 wants to wait until completing t2 and t1 has to call t2.join();
       ->If t1 executes t2.join() then immediately then t1 will be entered into waiting state until t2 completed once t2 completed then t1 can contineous its execution.



       Join(): it will until the timeout expires or thread finishes.
       Sleep(): It will just wait for the specified amount of time unless interrupted.
       wait(): it is hold execution of Thread.
       notify(): It will end the wait of any one thread so that it can resume execution.
       notifyAll():It will end the wait of all the thread at once which are in waiting states.The Thread will now execute in queue one after another.
       Q. What will happen if the thread call join() method on itself?
       If the thread calls join method on itself then the program will be stucked, in this case thread then to wait infinite amount of time.

       Q. How to threads can communicate with each other?
       Two threads can be communicate with each other by using: wait(),notify()&notifyAll() method

       ->These methods are present in object class but not in thread class.
       ->Thread can call these methods on any java object that's why there are present in object class.

       public class C extends Thread{
           int balance;
           public void run(){
               for(int i=0;i<100;i++){
                   balance=balance+1;
               }
               notify();
           }
       }

       public class Threads1 {
           public static void main(String[] args) {
               C c1=new C();
               c1.start();
               synchronized (c1){
                   try{
                       c1.wait();
                   }
                   catch (Exception e){
                       System.out.println(e);
                   }
               }
               System.out.println(c1.balance);

           }
       }/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home/bin/java -javaagent:/Applications/IntelliJ IDEA CE.app/Contents/lib/idea_rt.jar=61885:/Applications/IntelliJ IDEA CE.app/Contents/bin -Dfile.encoding=UTF-8 -classpath /Users/monishanker/Downloads/customerService/target/test-classes:/Users/monishanker/Downloads/customerService/target/classes:/Users/monishanker/.m2/repository/org/springframework/boot/spring-boot-starter-data-jpa/2.7.6/spring-boot-starter-data-jpa-2.7.6.jar:/Users/monishanker/.m2/repository/org/springframework/boot/spring-boot-starter-aop/2.7.6/spring-boot-starter-aop-2.7.6.jar:/Users/monishanker/.m2/repository/org/springframework/spring-aop/5.3.24/spring-aop-5.3.24.jar:/Users/monishanker/.m2/repository/org/aspectj/aspectjweaver/1.9.7/aspectjweaver-1.9.7.jar:/Users/monishanker/.m2/repository/org/springframework/boot/spring-boot-starter-jdbc/2.7.6/spring-boot-starter-jdbc-2.7.6.jar:/Users/monishanker/.m2/repository/com/zaxxer/HikariCP/4.0.3/HikariCP-4.0.3.jar:/Users/monishanker/.m2/repository/org/springframework/spring-jdbc/5.3.24/spring-jdbc-5.3.24.jar:/Users/monishanker/.m2/repository/jakarta/transaction/jakarta.transaction-api/1.3.3/jakarta.transaction-api-1.3.3.jar:/Users/monishanker/.m2/repository/jakarta/persistence/jakarta.persistence-api/2.2.3/jakarta.persistence-api-2.2.3.jar:/Users/monishanker/.m2/repository/org/hibernate/hibernate-core/5.6.14.Final/hibernate-core-5.6.14.Final.jar:/Users/monishanker/.m2/repository/org/jboss/logging/jboss-logging/3.4.3.Final/jboss-logging-3.4.3.Final.jar:/Users/monishanker/.m2/repository/net/bytebuddy/byte-buddy/1.12.19/byte-buddy-1.12.19.jar:/Users/monishanker/.m2/repository/antlr/antlr/2.7.7/antlr-2.7.7.jar:/Users/monishanker/.m2/repository/org/jboss/jandex/2.4.2.Final/jandex-2.4.2.Final.jar:/Users/monishanker/.m2/repository/com/fasterxml/classmate/1.5.1/classmate-1.5.1.jar:/Users/monishanker/.m2/repository/org/hibernate/common/hibernate-commons-annotations/5.1.2.Final/hibernate-commons-annotations-5.1.2.Final.jar:/Users/monishanker/.m2/repository/org/glassfish/jaxb/jaxb-runtime/2.3.7/jaxb-runtime-2.3.7.jar:/Users/monishanker/.m2/repository/org/glassfish/jaxb/txw2/2.3.7/txw2-2.3.7.jar:/Users/monishanker/.m2/repository/com/sun/istack/istack-commons-runtime/3.0.12/istack-commons-runtime-3.0.12.jar:/Users/monishanker/.m2/repository/com/sun/activation/jakarta.activation/1.2.2/jakarta.activation-1.2.2.jar:/Users/monishanker/.m2/repository/org/springframework/data/spring-data-jpa/2.7.6/spring-data-jpa-2.7.6.jar:/Users/monishanker/.m2/repository/org/springframework/data/spring-data-commons/2.7.6/spring-data-commons-2.7.6.jar:/Users/monishanker/.m2/repository/org/springframework/spring-orm/5.3.24/spring-orm-5.3.24.jar:/Users/monishanker/.m2/repository/org/springframework/spring-context/5.3.24/spring-context-5.3.24.jar:/Users/monishanker/.m2/repository/org/springframework/spring-tx/5.3.24/spring-tx-5.3.24.jar:/Users/monishanker/.m2/repository/org/springframework/spring-beans/5.3.24/spring-beans-5.3.24.jar:/Users/monishanker/.m2/repository/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar:/Users/monishanker/.m2/repository/org/springframework/spring-aspects/5.3.24/spring-aspects-5.3.24.jar:/Users/monishanker/.m2/repository/org/springframework/boot/spring-boot-starter-web/2.7.6/spring-boot-starter-web-2.7.6.jar:/Users/monishanker/.m2/repository/org/springframework/boot/spring-boot-starter/2.7.6/spring-boot-starter-2.7.6.jar:/Users/monishanker/.m2/repository/org/springframework/boot/spring-boot/2.7.6/spring-boot-2.7.6.jar:/Users/monishanker/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/2.7.6/spring-boot-autoconfigure-2.7.6.jar:/Users/monishanker/.m2/repository/org/springframework/boot/spring-boot-starter-logging/2.7.6/spring-boot-starter-logging-2.7.6.jar:/Users/monishanker/.m2/repository/ch/qos/logback/logback-classic/1.2.11/logback-classic-1.2.11.jar:/Users/monishanker/.m2/repository/ch/qos/logback/logback-core/1.2.11/logback-core-1.2.11.jar:/Users/monishanker/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.17.2/log4j-to-slf4j-2.17.2.jar:/Users/monishanker/.m2/repository/org/slf4j/jul-to-slf4j/1.7.36/jul-to-slf4j-1.7.36.jar:/Users/monishanker/.m2/repository/jakarta/annotation/jakarta.annotation-api/1.3.5/jakarta.annotation-api-1.3.5.jar:/Users/monishanker/.m2/repository/org/yaml/snakeyaml/1.30/snakeyaml-1.30.jar:/Users/monishanker/.m2/repository/org/springframework/boot/spring-boot-starter-json/2.7.6/spring-boot-starter-json-2.7.6.jar:/Users/monishanker/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.13.4.2/jackson-databind-2.13.4.2.jar:/Users/monishanker/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.13.4/jackson-annotations-2.13.4.jar:/Users/monishanker/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.13.4/jackson-core-2.13.4.jar:/Users/monishanker/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.13.4/jackson-datatype-jdk8-2.13.4.jar:/Users/monishanker/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.13.4/jackson-datatype-jsr310-2.13.4.jar:/Users/monishanker/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.13.4/jackson-module-parameter-names-2.13.4.jar:/Users/monishanker/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/2.7.6/spring-boot-starter-tomcat-2.7.6.jar:/Users/monishanker/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/9.0.69/tomcat-embed-websocket-9.0.69.jar:/Users/monishanker/.m2/repository/org/springframework/spring-web/5.3.24/spring-web-5.3.24.jar:/Users/monishanker/.m2/repository/org/springframework/spring-webmvc/5.3.24/spring-webmvc-5.3.24.jar:/Users/monishanker/.m2/repository/org/springframework/spring-expression/5.3.24/spring-expression-5.3.24.jar:/Users/monishanker/.m2/repository/com/mysql/mysql-connector-j/8.0.31/mysql-connector-j-8.0.31.jar:/Users/monishanker/.m2/repository/org/projectlombok/lombok/1.18.24/lombok-1.18.24.jar:/Users/monishanker/.m2/repository/org/springframework/boot/spring-boot-starter-test/2.7.6/spring-boot-starter-test-2.7.6.jar:/Users/monishanker/.m2/repository/org/springframework/boot/spring-boot-test/2.7.6/spring-boot-test-2.7.6.jar:/Users/monishanker/.m2/repository/org/springframework/boot/spring-boot-test-autoconfigure/2.7.6/spring-boot-test-autoconfigure-2.7.6.jar:/Users/monishanker/.m2/repository/com/jayway/jsonpath/json-path/2.7.0/json-path-2.7.0.jar:/Users/monishanker/.m2/repository/net/minidev/json-smart/2.4.8/json-smart-2.4.8.jar:/Users/monishanker/.m2/repository/net/minidev/accessors-smart/2.4.8/accessors-smart-2.4.8.jar:/Users/monishanker/.m2/repository/org/ow2/asm/asm/9.1/asm-9.1.jar:/Users/monishanker/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/2.3.3/jakarta.xml.bind-api-2.3.3.jar:/Users/monishanker/.m2/repository/jakarta/activation/jakarta.activation-api/1.2.2/jakarta.activation-api-1.2.2.jar:/Users/monishanker/.m2/repository/org/assertj/assertj-core/3.22.0/assertj-core-3.22.0.jar:/Users/monishanker/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:/Users/monishanker/.m2/repository/org/junit/jupiter/junit-jupiter/5.8.2/junit-jupiter-5.8.2.jar:/Users/monishanker/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.8.2/junit-jupiter-api-5.8.2.jar:/Users/monishanker/.m2/repository/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0.jar:/Users/monishanker/.m2/repository/org/junit/platform/junit-platform-commons/1.8.2/junit-platform-commons-1.8.2.jar:/Users/monishanker/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/Users/monishanker/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.8.2/junit-jupiter-params-5.8.2.jar:/Users/monishanker/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.8.2/junit-jupiter-engine-5.8.2.jar:/Users/monishanker/.m2/repository/org/junit/platform/junit-platform-engine/1.8.2/junit-platform-engine-1.8.2.jar:/Users/monishanker/.m2/repository/org/mockito/mockito-core/4.5.1/mockito-core-4.5.1.jar:/Users/monishanker/.m2/repository/net/bytebuddy/byte-buddy-agent/1.12.19/byte-buddy-agent-1.12.19.jar:/Users/monishanker/.m2/repository/org/objenesis/objenesis/3.2/objenesis-3.2.jar:/Users/monishanker/.m2/repository/org/mockito/mockito-junit-jupiter/4.5.1/mockito-junit-jupiter-4.5.1.jar:/Users/monishanker/.m2/repository/org/skyscreamer/jsonassert/1.5.1/jsonassert-1.5.1.jar:/Users/monishanker/.m2/repository/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar:/Users/monishanker/.m2/repository/org/springframework/spring-core/5.3.24/spring-core-5.3.24.jar:/Users/monishanker/.m2/repository/org/springframework/spring-jcl/5.3.24/spring-jcl-5.3.24.jar:/Users/monishanker/.m2/repository/org/springframework/spring-test/5.3.24/spring-test-5.3.24.jar:/Users/monishanker/.m2/repository/org/xmlunit/xmlunit-core/2.9.0/xmlunit-core-2.9.0.jar:/Users/monishanker/.m2/repository/org/apache/poi/poi-ooxml/5.1.0/poi-ooxml-5.1.0.jar:/Users/monishanker/.m2/repository/org/apache/poi/poi/5.1.0/poi-5.1.0.jar:/Users/monishanker/.m2/repository/commons-codec/commons-codec/1.15/commons-codec-1.15.jar:/Users/monishanker/.m2/repository/org/apache/commons/commons-math3/3.6.1/commons-math3-3.6.1.jar:/Users/monishanker/.m2/repository/com/zaxxer/SparseBitSet/1.2/SparseBitSet-1.2.jar:/Users/monishanker/.m2/repository/org/apache/poi/poi-ooxml-lite/5.1.0/poi-ooxml-lite-5.1.0.jar:/Users/monishanker/.m2/repository/org/apache/xmlbeans/xmlbeans/5.0.2/xmlbeans-5.0.2.jar:/Users/monishanker/.m2/repository/org/apache/commons/commons-compress/1.21/commons-compress-1.21.jar:/Users/monishanker/.m2/repository/commons-io/commons-io/2.11.0/commons-io-2.11.0.jar:/Users/monishanker/.m2/repository/com/github/virtuald/curvesapi/1.06/curvesapi-1.06.jar:/Users/monishanker/.m2/repository/org/apache/logging/log4j/log4j-api/2.17.2/log4j-api-2.17.2.jar:/Users/monishanker/.m2/repository/org/apache/commons/commons-collections4/4.4/commons-collections4-4.4.jar:/Users/monishanker/.m2/repository/org/apache/tomcat/embed/tomcat-embed-jasper/9.0.69/tomcat-embed-jasper-9.0.69.jar:/Users/monishanker/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/9.0.69/tomcat-embed-core-9.0.69.jar:/Users/monishanker/.m2/repository/org/apache/tomcat/tomcat-annotations-api/9.0.69/tomcat-annotations-api-9.0.69.jar:/Users/monishanker/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/9.0.69/tomcat-embed-el-9.0.69.jar:/Users/monishanker/.m2/repository/org/eclipse/jdt/ecj/3.18.0/ecj-3.18.0.jar com.customerService.thread.Threads1
       Exception in thread "Thread-0" java.lang.IllegalMonitorStateException: current thread is not owner
       	at java.base/java.lang.Object.notify(Native Method)
       	at com.customerService.thread.C.run(C.java:9)
       100


       Deadlock:
       ->when two thread are waiting for each other to release the ock and neither thread releasing the lock then these thread has gone into deadlock state.
       ->Synchronized keyword is the only reason for deadlock situation.
       ->There are no resolution technique for deadlock but several prevention technique is available.

       Deadlock vs Starvation
       ->Long waiting of a thread where waiting never ends is called deadlock.
       ->Long waiting of a thread where waiting ends at a certain point is called Starvation.

       Demon Thread:
       -> A Demon Thread is a background service which run as a low priority thread and performs background operation like garbage collection.

       Q. How we can check daemon nature of a thread.
       -> we can check daemon nature of a thread by using is Daemon() method of thread class.
       public Boolean is Daemon().

       Q. How can we convert a normal thread into daemon thread?
       ->we can make a thread daemon thread by using setDaemon() method of thread class.
       ->public void setDaemon(Boolean b)
       ->But changing daemon nature is possible before starting of a thread only.
       ->After starting a thread if we are trying to change the daemon nature then we will get illagal thread start excecution.

       Q. Thread pool
       ->Thread pool is collection of thread when request is handle using a thread multitasking can be performed and hence it will give a feel to user that
       all the request are being at once.
       ->Thread pool is a pool of already created threads ready to do our job.
       ->Thread pool framework also known as executor framework.
       Q. We can create a thread pool as follows:
       ->ExecutorService service=Executors.newFixedThreadPool(3);
       ->We can submit a runnable job by using submit() method.
       ->service.submit(job);
       ->we can shutdown executor service by using shutdown() method.
       ->service.shutdown().

       Q. Can we restart a dead Thread in java?
       No,if we try to restart a dead thread by using start method we will get run time exception since the thread is not alive.

       Q. Can are thread block the other thread?
       No, one thread can not block the other thread in java. It can block the current thread that is running.

       Q. Can we restart a thread already started in Java.
       A thread can be started in java using start() method in java. If we call start method second time once it is start it we cause Runtime Exception.
       A runnable thread can not be restart.

       Q. Difference between runnable and callable.





       Q. What is thread synchronization?
       When two threads are operating on a common data non-synchronized manner data will get corrupted.



       Q. Explain about priority of thread?
       Which Thread will be executed first is depended on priority
       1. Normal priority(represent value 5);
       2. Max priority(represent value 10);
       3. Min priority(represent value 1)

       Q. How to get and set priority of a thread?
       By using setPriority() we can set the priority of a thread and by using getPriority() we can get priority of a thread.

       package com.customerService.thread;

       public class Thread1 extends Thread{
           public void run(){
               System.out.println("Running");
           }

           public static void main(String[] args) {
               Thread1 thread1=new Thread1();
               thread1.start();
               thread1.setPriority(NORM_PRIORITY);
               System.out.println(thread1.getPriority());

               thread1.setPriority(MAX_PRIORITY);
               System.out.println(thread1.getPriority());

               thread1.setPriority(MIN_PRIORITY);
               System.out.println(thread1.getPriority());
           }
       }
       5
       10
       1
       Running


       import java.util.concurrent.Executors;
       import java.util.concurrent.ScheduledExecutorService;
       import java.util.concurrent.TimeUnit;

       public class SchedulerExample {
           public static void main(String[] args) {
               ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);

               // Schedule a task to be executed every 1 second
               scheduler.scheduleAtFixedRate(new Runnable() {
                   @Override
                   public void run() {
                       System.out.println("Task executed at: " + System.currentTimeMillis());
                   }
               }, 0, 1, TimeUnit.SECONDS);

               // Optionally, you can schedule a task to be executed after a delay
               scheduler.schedule(new Runnable() {
                   @Override
                   public void run() {
                       System.out.println("Task executed after a delay.");
                   }
               }, 5, TimeUnit.SECONDS);

               // Shutdown the scheduler after some time
               scheduler.schedule(new Runnable() {
                   @Override
                   public void run() {
                       scheduler.shutdown();
                   }
               }, 10, TimeUnit.SECONDS);
           }
       }
