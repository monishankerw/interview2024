Java has gone through several major updates over the years. Each version of Java introduces new features, improvements, and bug fixes. Here's a simple overview of the key differences between some of the main versions:

Java 8
Released: March 2014

Lambda Expressions: Introduced a way to write anonymous methods, enabling functional programming.
Stream API: Simplifies operations on collections of objects.
Optional: A new class to avoid null pointer exceptions.
New Date and Time API: Replaced the old java.util.Date and java.util.Calendar classes.
Default Methods in Interfaces: Allows methods with implementation in interfaces.
Java 9
Released: September 2017

Module System (Project Jigsaw): Introduces a module system to better manage large applications.
JShell: An interactive tool to run Java code snippets.
HTTP/2 Client: Improved HTTP client that supports HTTP/2.
Process API Improvements: Enhancements to manage and control operating system processes.
Java 10
Released: March 2018

Local-Variable Type Inference: var keyword allows for local variable type inference.
Garbage Collector Improvements: Enhancements to the garbage collection for better performance.
Java 11
Released: September 2018

New String Methods: New methods like isBlank(), lines(), strip().
Local-Variable Syntax for Lambda Parameters: Use var in lambda expressions.
HTTP Client: Standardized HTTP Client API introduced in Java 9 as a preview.
Java 12
Released: March 2019

Switch Expressions (Preview): Simplified switch statements and expressions.
JVM Constants API: For modeling key class-file and run-time artifacts.
Java 13
Released: September 2019

Text Blocks (Preview): Multiline string literals.
Switch Expressions: Further enhancements to switch expressions.
Java 14
Released: March 2020

Pattern Matching for instanceof (Preview): Simplifies the common use of instanceof.
Records (Preview): A new way to declare data carrier classes.
Helpful NullPointerExceptions: Better error messages for null pointer exceptions.
Java 15
Released: September 2020

Text Blocks: Standardized multiline strings.
Sealed Classes (Preview): Restricts which other classes or interfaces may extend or implement them.
Hidden Classes: Intended for frameworks to define classes that are not discoverable.
Java 16
Released: March 2021

Pattern Matching for instanceof: Becomes a standard feature.
Records: Becomes a standard feature.
Sealed Classes: Second preview with refinements.
Java 17
Released: September 2021 (LTS - Long Term Support)

Sealed Classes: Standard feature now.
Pattern Matching for switch (Preview): Enhances switch expressions with pattern matching.
New macOS Rendering Pipeline: For better macOS integration.
Java 18
Released: March 2022

Simple Web Server: A minimal web server for prototyping and testing.
UTF-8 by Default: UTF-8 is the default charset for Java APIs.
Java 19
Released: September 2022

Virtual Threads (Preview): Lightweight threads for better concurrency.
Pattern Matching for switch (Second Preview): Further enhancements to switch expressions.
Java 20
Released: March 2023

Record Patterns (Preview): Pattern matching for deconstructing records.
Scoped Values (Incubator): Provides a way to share immutable data within and across threads.
Java 21
Released: September 2023 (LTS)

String Templates (Preview): Simplifies string interpolation.
Sequenced Collections: Introduces collections with a defined encounter order.
Each new version aims to improve performance, security, and ease of development. The versions marked as LTS (Long Term Support) are typically used in production environments for a longer period, as they receive extended support and updates.

code wise

ChatGPT
Here's a brief comparison of Java versions through code examples to highlight some of the main changes and improvements:

Java 8
Lambda Expressions
java
Copy code
List<String> list = Arrays.asList("a", "b", "c");
list.forEach(s -> System.out.println(s));
Stream API
java
Copy code
List<String> list = Arrays.asList("a", "b", "c");
list.stream()
    .filter(s -> s.startsWith("a"))
    .forEach(System.out::println);
Optional
java
Copy code
Optional<String> optional = Optional.ofNullable("Hello");
optional.ifPresent(System.out::println);
Java 9
Module System
java
Copy code
module com.example.myapp {
    requires java.base;
}
JShell
shell
Copy code
$ jshell
jshell> System.out.println("Hello, JShell!");
Process API Improvements
java
Copy code
ProcessHandle currentProcess = ProcessHandle.current();
System.out.println("PID: " + currentProcess.pid());
Java 10
Local-Variable Type Inference
java
Copy code
var list = new ArrayList<String>();
list.add("Hello");
Java 11
New String Methods
java
Copy code
String str = "  hello  ";
System.out.println(str.strip()); // "hello"
System.out.println("".isBlank()); // true
HTTP Client
java
Copy code
HttpClient client = HttpClient.newHttpClient();
HttpRequest request = HttpRequest.newBuilder()
    .uri(URI.create("https://example.com"))
    .build();
client.sendAsync(request, BodyHandlers.ofString())
    .thenApply(HttpResponse::body)
    .thenAccept(System.out::println);
Java 12
Switch Expressions (Preview)
java
Copy code
int num = 2;
String result = switch (num) {
    case 1 -> "one";
    case 2 -> "two";
    default -> "unknown";
};
System.out.println(result);
Java 13
Text Blocks (Preview)
java
Copy code
String textBlock = """
    Hello,
    World!
    """;
System.out.println(textBlock);
Java 14
Pattern Matching for instanceof (Preview)
java
Copy code
Object obj = "Hello";
if (obj instanceof String s) {
    System.out.println(s.toUpperCase());
}
Records (Preview)
java
Copy code
public record Person(String name, int age) {}
Person person = new Person("John", 30);
System.out.println(person.name());
Java 15
Text Blocks
java
Copy code
String json = """
    {
        "name": "John",
        "age": 30
    }
    """;
System.out.println(json);
Java 16
Pattern Matching for instanceof
java
Copy code
Object obj = "Hello";
if (obj instanceof String s) {
    System.out.println(s.toUpperCase());
}
Records
java
Copy code
public record Person(String name, int age) {}
Person person = new Person("John", 30);
System.out.println(person.name());
Java 17
Sealed Classes
java
Copy code
public abstract sealed class Shape
    permits Circle, Rectangle, Square {}

public final class Circle extends Shape {}
public final class Rectangle extends Shape {}
public final class Square extends Shape {}
Java 18
Simple Web Server
java
Copy code
var server = HttpServer.create(new InetSocketAddress(8080), 0);
server.createContext("/hello", exchange -> {
    String response = "Hello, World!";
    exchange.sendResponseHeaders(200, response.getBytes().length);
    try (OutputStream os = exchange.getResponseBody()) {
        os.write(response.getBytes());
    }
});
server.start();
Java 19
Virtual Threads (Preview)
java
Copy code
try (var executor = Executors.newVirtualThreadPerTaskExecutor()) {
    executor.submit(() -> System.out.println("Hello from virtual thread!"));
}
Java 20
Record Patterns (Preview)
java
Copy code
record Point(int x, int y) {}
Object obj = new Point(1, 2);
if (obj instanceof Point(int x, int y)) {
    System.out.println("x: " + x + ", y: " + y);
}
Java 21
String Templates (Preview)
java
Copy code
String name = "World";
String greeting = STR."Hello, \{name}!";
System.out.println(greeting);
Sequenced Collections
java
Copy code
SequencedCollection<String> collection = new ArrayList<>();
collection.add("A");
collection.add("B");
collection.add("C");
collection.forEach(System.out::println);
Each of these examples illustrates new features and improvements introduced in different versions of Jav